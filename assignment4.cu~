/* Vector addition deom on GPU

   To compile: nvcc -o testprog1 testprog1.cu

 */
#include <ctime>
#include <iostream>
#include <string>
#include <cmath>

#include <cuda.h>
#include "lenses.h"
#include "arrayff.hxx"


// Boundaries in physical units on the lens plane
const float WL  = 2.0;
const float XL1 = -WL;
const float XL2 =  WL;
const float YL1 = -WL;
const float YL2 =  WL;

// Used to time code. OK for single threaded programs but not for
// multithreaded programs. See other demos for hints at timing CUDA
// code.
double diffclock(clock_t clock1,clock_t clock2)
{
  double diffticks = clock1 - clock2;
  double diffms = (diffticks * 1000) / CLOCKS_PER_SEC;
  return diffms; // Time difference in milliseconds
}

// Kernel that executes on the CUDA device. This is executed by ONE
// stream processor
__global__ void ray_shoot(int *maxX, int *maxY)
{
	int threadBlockPos = (blockIdx.x * blockDim.x) + threadIdx.x;

	int y = threadBlockPos / *maxY;
	int x = threadBlockPos - (*maxX * y);

	// Source star parameters. You can adjust these if you like - it is
	// interesting to look at the different lens images that result
	//const float rsrc = 0.1;      // radius
	//const float ldc  = 0.5;      // limb darkening coefficient
	//const float xsrc = 0.0;      // x and y centre on the map
	//const float ysrc = 0.0;

	//const float rsrc2 = rsrc * rsrc;

	//int x = blockDim.x * blockIdx.x + threadIdx.x;
	//int y = blockDim.y * blockIdx.y + threadIdx.y;


	//XL1, YL1, XL2, YL2
	//ix, iy (based on x and y)
	//xlens, ylens, eps, nlenses
}

// main routine that executes on the host
int main(void)
{
	//boundaries
	float *bounds = new float[4];
	bounds[0] = XL1;
	bounds[1] = XL2;
	bounds[2] = YL1;
	bounds[3] = YL2;

	// Set up lensing system configuration - call example_1, _2, _3 or
	// _n as you wish. The positions and mass fractions of the lenses
	// are stored in these arrays
	float* xlens;
	float* ylens;
	float* eps;
	const int nlenses = set_example_1(&xlens, &ylens, &eps);
	std::cout << "# Simulating " << nlenses << " lens system" << std::endl;

	// Pixel size in physical units of the lens image. You can try finer
	// lens scale which will result in larger images (and take more
	// time).
	const float lens_scale = 0.005;

	// Size of the lens image
	const int npixx = static_cast<int>(floor((XL2 - XL1) / lens_scale)) + 1;
	const int npixy = static_cast<int>(floor((YL2 - YL1) / lens_scale)) + 1;
	std::cout << "# Building " << npixx << "X" << npixy << " lens image" << std::endl;

	// Put the lens image in this array
  	Array<float, 2> lensim(npixy, npixx);

	clock_t tstart = clock();

	int total_pixels = npixx + npixy;
		
	int threadsPerBlock = 1024;
	int numBlocks = (total_pixels + threadsPerBlock - 1) / threadsPerBlock;

	//--------------------------
	//cuda part
	//==========================
	
	
	ray_shoot<<<numBlocks, threadsPerBlock>>>();

	

	clock_t tend = clock();
	double tms = diffclock(tend, tstart);
	std::cout << "# Time elapsed: " << tms << " ms " << std::endl;

	// Write the lens image to a FITS formatted file. You can view this
	// image file using ds9
	dump_array<float, 2>(lensim, "lens.fit");

	delete[] xlens;
	delete[] ylens;
	delete[] eps;
}
